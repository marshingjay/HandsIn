{"ast":null,"code":"var _jsxFileName = \"/Users/claremeyer/Documents/spring_senior/senior_design/handsIn/front/pages/login.js\";\nvar __jsx = React.createElement;\nimport Layout from '../components/TheLayout';\nimport React, { useContext, useState, useCallback } from 'react';\nimport { Button, FormGroup, FormControl } from 'react-bootstrap';\nimport Header from '../components/Header';\nimport { GlobalContext } from '../components/GlobalContext'; // need this to change the isLoggedIn state of the header\n// also will change the state if isVolunteer depending on how they log in\n\nconst updateLinks = state => {\n  if (state.isLoggedIn == true) {\n    state.page = state.type;\n  } else {\n    state.page = \"\\login\";\n  }\n};\n\nfunction handleSubmit(state, acctType, forceUpdate) {\n  state.isLoggedIn = true;\n  state.type = acctType;\n  updateLinks(state);\n  forceUpdate();\n} // function toggleType(state, newState, forceUpdate) {\n//     state.type = newState;\n//     updateLinks(state);\n//     // forceUpdate();\n// }\n\n\nconst Login = () => {\n  const forceUpdate = React.useState()[1].bind(null, {});\n  const {\n    0: email,\n    1: setEmail\n  } = useState(\"\");\n  const {\n    0: password,\n    1: setPassword\n  } = useState(\"\");\n  const {\n    0: acctType,\n    1: setAcctType\n  } = useState(\"\");\n  const state = useContext(GlobalContext);\n\n  function validate() {\n    return email.length > 0 && password.length > 0;\n  }\n\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, __jsx(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, __jsx(FormGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, __jsx(FormControl, {\n    autoFocus: true,\n    type: \"email\",\n    placeholder: \"Email\",\n    value: email,\n    onChange: e => setEmail(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  })), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Here\", state.isLoggedIn, \" \", state.page), __jsx(FormGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, __jsx(FormControl, {\n    autoFocus: true,\n    type: \"password\",\n    placeholder: \"password\",\n    value: password,\n    onChange: e => setPassword(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })), __jsx(FormGroup, {\n    onChange: e => setAcctType(e.target.value.acctType),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, __jsx(FormControl, {\n    autoFocus: true,\n    type: \"radio\",\n    name: \"acctType\",\n    value: acctType,\n    placeholder: \"Volunteer Account\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), __jsx(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Volunteer Account\"), __jsx(FormControl, {\n    autoFocus: true,\n    type: \"radio\",\n    name: \"acctType\",\n    value: acctType,\n    placeholder: \"Organization Account\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), __jsx(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"Organization Account\"))), __jsx(\"button\", {\n    onClick: () => handleSubmit(state, this.form.value.acctType, forceUpdate),\n    disabled: !validate(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Login\")) // <Layout>\n  //     <p>Login</p>\n  //     <form onSubmit={()=>toggleLoggedIn(state, true, forceUpdate)}>\n  //         <label>\n  //             <textarea type={email} placeholder={\"email\"}/>\n  //         </label>\n  //         <select onChange={(e) => toggleType(state, e.target.value, forceUpdate)}>\n  //             <option value=\"/orgDash\" >Organization</option>\n  //             <option value=\"/userDash\">Volunteer</option>\n  //         </select>\n  //     </form>\n  //     <text>\n  //     {/* <select onChange={(e) => dispatch({type: 'change'})}> */}\n  //         <option value={false}>Just place holding for state, select if NOT logged in</option>\n  //         <option value={true}>Just place holding for state, select if logged in</option>\n  //     </text>\n  //     <p>Here{state.isLoggedIn} {state.page}</p>\n  //     <button onClick={() => toggleLoggedIn(state, true, forceUpdate)}>Sign Up</button>\n  // </Layout>\n  ;\n};\n\nexport default Login;","map":{"version":3,"sources":["/Users/claremeyer/Documents/spring_senior/senior_design/handsIn/front/pages/login.js"],"names":["Layout","React","useContext","useState","useCallback","Button","FormGroup","FormControl","Header","GlobalContext","updateLinks","state","isLoggedIn","page","type","handleSubmit","acctType","forceUpdate","Login","bind","email","setEmail","password","setPassword","setAcctType","validate","length","e","target","value","form"],"mappings":"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","sourcesContent":["import Layout from '../components/TheLayout';\nimport React, { useContext, useState, useCallback } from 'react';\nimport { Button, FormGroup, FormControl } from 'react-bootstrap';\nimport Header from '../components/Header';\n\nimport {GlobalContext} from '../components/GlobalContext';\n\n// need this to change the isLoggedIn state of the header\n// also will change the state if isVolunteer depending on how they log in\nconst updateLinks = (state) => {\n    if (state.isLoggedIn == true) {\n        state.page = state.type;\n    } else {\n        state.page = \"\\login\";\n    }\n}\n\nfunction handleSubmit(state, acctType, forceUpdate) {\n    state.isLoggedIn = true;\n    state.type = acctType\n    updateLinks(state);\n\n    forceUpdate();\n}\n\n// function toggleType(state, newState, forceUpdate) {\n//     state.type = newState;\n//     updateLinks(state);\n//     // forceUpdate();\n// }\n\n\nconst Login = () => {\n    \n    const forceUpdate = React.useState()[1].bind(null, {})\n\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [acctType, setAcctType] = useState(\"\");\n\n    const state = useContext(GlobalContext);\n\n    function validate(){\n        return email.length > 0 && password.length > 0;\n    }\n\n    return (\n        <Layout>\n            <form>\n                <FormGroup>\n                    {/* <ControlLabel>Email</ControlLabel> */}\n                    <FormControl \n                        autoFocus\n                        type=\"email\"\n                        placeholder = \"Email\"\n                        value={email}\n                        onChange={(e)=>setEmail(e.target.value)}\n                    />\n                </FormGroup>\n                <p>Here{state.isLoggedIn} {state.page}</p>\n                <FormGroup>\n                    {/* <label>Password</label> */}\n                    <FormControl\n                        autoFocus\n                        type=\"password\"\n                        placeholder=\"password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    />\n                </FormGroup>\n                <FormGroup onChange={(e) => setAcctType(e.target.value.acctType)}>\n                    {/* <ControlLabel>Password</ControlLabel> */}\n                    <FormControl\n                        autoFocus\n                        type=\"radio\"\n                        name=\"acctType\"\n                        value={acctType}\n                        placeholder=\"Volunteer Account\"\n                    /><label>Volunteer Account</label>\n                    <FormControl\n                        autoFocus\n                        type=\"radio\"\n                        name=\"acctType\"\n                        value={acctType}\n                        placeholder=\"Organization Account\"\n                    /><label>Organization Account</label>\n                </FormGroup>\n\n            </form>\n            <button onClick={() => handleSubmit(state, this.form.value.acctType, forceUpdate)} disabled={!validate()}>Login</button>\n            \n        </Layout>\n        // <Layout>\n        //     <p>Login</p>\n        //     <form onSubmit={()=>toggleLoggedIn(state, true, forceUpdate)}>\n        //         <label>\n        //             <textarea type={email} placeholder={\"email\"}/>\n        //         </label>\n                \n        //         <select onChange={(e) => toggleType(state, e.target.value, forceUpdate)}>\n        //             <option value=\"/orgDash\" >Organization</option>\n        //             <option value=\"/userDash\">Volunteer</option>\n        //         </select>\n        //     </form>\n\n        //     <text>\n        //     {/* <select onChange={(e) => dispatch({type: 'change'})}> */}\n        //         <option value={false}>Just place holding for state, select if NOT logged in</option>\n        //         <option value={true}>Just place holding for state, select if logged in</option>\n        //     </text>\n\n        //     <p>Here{state.isLoggedIn} {state.page}</p>\n            \n            \n\n        //     <button onClick={() => toggleLoggedIn(state, true, forceUpdate)}>Sign Up</button>\n        // </Layout>\n    )  \n}\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}