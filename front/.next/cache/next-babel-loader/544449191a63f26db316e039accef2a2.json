{"ast":null,"code":"var _jsxFileName = \"/Users/claremeyer/Documents/spring_senior/senior_design/handsIn/front/pages/login.js\";\nvar __jsx = React.createElement;\nimport Layout from '../components/TheLayout';\nimport React, { useContext, useState, useCallback } from 'react';\nimport { Button, FormGroup, FormControl } from 'react-bootstrap';\nimport Header from '../components/Header';\nimport { GlobalContext } from '../components/GlobalContext'; // need this to change the isLoggedIn state of the header\n// also will change the state if isVolunteer depending on how they log in\n\nvar updateLinks = function updateLinks(state) {\n  if (state.isLoggedIn == \"true\") {\n    state.page = state.type;\n  } else {\n    state.page = \"\\login\";\n  }\n};\n\nfunction toggleLoggedIn(state, newState, forceUpdate) {\n  state.isLoggedIn = newState;\n  updateLinks(state);\n  forceUpdate();\n  console.log(state.isLoggedIn);\n  console.log(state.page);\n  console.log(state.type);\n}\n\nfunction toggleType(state, newState, forceUpdate) {\n  state.type = newState;\n  updateLinks(state);\n  forceUpdate();\n}\n\nvar Login = function Login() {\n  var state = useContext(GlobalContext); // const forceUpdate = React.useState()[1].bind(null, {})\n\n  var _useState = useState(\"\"),\n      email = _useState[0],\n      setEmail = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      password = _useState2[0],\n      setPassword = _useState2[1];\n\n  function validate() {\n    return email.length > 0 && password.length > 0;\n  }\n\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, __jsx(\"form\", {\n    onSubmit: function onSubmit() {\n      return toggleLoggedIn(state, true, forceUpdate);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, __jsx(FormGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, __jsx(FormControl, {\n    autoFocus: true,\n    type: \"email\",\n    value: email,\n    onChange: function onChange(e) {\n      return setEmail(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  })), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Here\", state.isLoggedIn, \" \", state.page), __jsx(FormGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, __jsx(FormControl, {\n    autoFocus: true,\n    type: \"password\",\n    value: password,\n    onChange: function onChange(e) {\n      return setPassword(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  })), __jsx(Button, {\n    block: true,\n    disabled: !validate(),\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Login\"))) // <Layout>\n  //     <p>Login</p>\n  //     <form onSubmit={()=>toggleLoggedIn(state, true, forceUpdate)}>\n  //         <label>\n  //             <textarea type={email} placeholder={\"email\"}/>\n  //         </label>\n  //         <select onChange={(e) => toggleType(state, e.target.value, forceUpdate)}>\n  //             <option value=\"/orgDash\" >Organization</option>\n  //             <option value=\"/userDash\">Volunteer</option>\n  //         </select>\n  //     </form>\n  //     <text>\n  //     {/* <select onChange={(e) => dispatch({type: 'change'})}> */}\n  //         <option value={false}>Just place holding for state, select if NOT logged in</option>\n  //         <option value={true}>Just place holding for state, select if logged in</option>\n  //     </text>\n  //     <p>Here{state.isLoggedIn} {state.page}</p>\n  //     <button onClick={() => toggleLoggedIn(state, true, forceUpdate)}>Sign Up</button>\n  // </Layout>\n  ;\n};\n\nexport default Login;","map":{"version":3,"sources":["/Users/claremeyer/Documents/spring_senior/senior_design/handsIn/front/pages/login.js"],"names":["Layout","React","useContext","useState","useCallback","Button","FormGroup","FormControl","Header","GlobalContext","updateLinks","state","isLoggedIn","page","type","toggleLoggedIn","newState","forceUpdate","console","log","toggleType","Login","email","setEmail","password","setPassword","validate","length","e","target","value"],"mappings":"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","sourcesContent":["import Layout from '../components/TheLayout';\nimport React, { useContext, useState, useCallback } from 'react';\nimport { Button, FormGroup, FormControl } from 'react-bootstrap';\nimport Header from '../components/Header';\n\nimport {GlobalContext} from '../components/GlobalContext';\n\n// need this to change the isLoggedIn state of the header\n// also will change the state if isVolunteer depending on how they log in\nconst updateLinks = (state) => {\n    if (state.isLoggedIn == \"true\") {\n        state.page = state.type;\n    } else {\n        state.page = \"\\login\";\n    }\n}\n\nfunction toggleLoggedIn(state, newState, forceUpdate) {\n    state.isLoggedIn = newState;\n    updateLinks(state);\n    forceUpdate();\n\n    console.log(state.isLoggedIn);\n    console.log(state.page);\n    console.log(state.type);\n}\n\nfunction toggleType(state, newState, forceUpdate) {\n    state.type = newState;\n    updateLinks(state);\n    forceUpdate();\n}\n\n\nconst Login = () => {\n    const state = useContext(GlobalContext);\n    // const forceUpdate = React.useState()[1].bind(null, {})\n\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    function validate(){\n        return email.length > 0 && password.length > 0;\n    }\n\n    return (\n        <Layout>\n            <form onSubmit={() => toggleLoggedIn(state, true, forceUpdate)}>\n                <FormGroup>\n                    {/* <ControlLabel>Email</ControlLabel> */}\n                    <FormControl \n                        autoFocus\n                        type=\"email\"\n                        value={email}\n                        onChange={(e)=>setEmail(e.target.value)}\n                    />\n                </FormGroup>\n                <p>Here{state.isLoggedIn} {state.page}</p>\n                <FormGroup>\n                    {/* <ControlLabel>Password</ControlLabel> */}\n                    <FormControl\n                        autoFocus\n                        type=\"password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                    />\n                </FormGroup>\n                <Button block disabled={!validate()} type=\"submit\">Login</Button>\n            </form>\n        </Layout>\n        // <Layout>\n        //     <p>Login</p>\n        //     <form onSubmit={()=>toggleLoggedIn(state, true, forceUpdate)}>\n        //         <label>\n        //             <textarea type={email} placeholder={\"email\"}/>\n        //         </label>\n                \n        //         <select onChange={(e) => toggleType(state, e.target.value, forceUpdate)}>\n        //             <option value=\"/orgDash\" >Organization</option>\n        //             <option value=\"/userDash\">Volunteer</option>\n        //         </select>\n        //     </form>\n\n        //     <text>\n        //     {/* <select onChange={(e) => dispatch({type: 'change'})}> */}\n        //         <option value={false}>Just place holding for state, select if NOT logged in</option>\n        //         <option value={true}>Just place holding for state, select if logged in</option>\n        //     </text>\n\n        //     <p>Here{state.isLoggedIn} {state.page}</p>\n            \n            \n\n        //     <button onClick={() => toggleLoggedIn(state, true, forceUpdate)}>Sign Up</button>\n        // </Layout>\n    )  \n}\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}