{"ast":null,"code":"var _jsxFileName = \"/Users/claremeyer/Documents/spring_senior/senior_design/handsIn/front/pages/login.js\";\nvar __jsx = React.createElement;\nimport Layout from '../components/TheLayout';\nimport React, { useContext, useState } from 'react';\nimport { GlobalContext } from '../components/GlobalContext'; // need this to change the isLoggedIn state of the header\n// also will change the state if isVolunteer depending on how they log in\n\nconst toggleLoggedIn = (state, newState) => {\n  if (state.isLoggedIn) {\n    state.isLoggedIn = false;\n  } else {\n    state.isLoggedIn = true;\n  }\n};\n\nconst toggleType = (state, setState) => {\n  if (state.isVolunteer) {\n    dispatch({\n      isVolunteer: false\n    });\n  } else {\n    dispatch({\n      isVolunteer: true\n    });\n  }\n};\n\nconst Login = () => {\n  // const [state, setState] = useContext(GlobalContext);\n  const state = useContext(GlobalContext);\n  const {\n    setState\n  } = state; // const {isLoggedIn, isVolunteer} = state;\n  // const [isLoggedIn, setIsLoggedIn] = useState('');\n  // const [state, setState] = useContext(GlobalContext);\n\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Login\"), __jsx(\"select\", {\n    onChange: () => toggleLoggedIn(state, newState),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, __jsx(\"option\", {\n    newState: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"Just place holding for state, select if NOT logged in\"), __jsx(\"option\", {\n    newState: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Just place holding for state, select if logged in\")), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Here\", state.isLoggedIn));\n};\n\nexport default Login;","map":{"version":3,"sources":["/Users/claremeyer/Documents/spring_senior/senior_design/handsIn/front/pages/login.js"],"names":["Layout","React","useContext","useState","GlobalContext","toggleLoggedIn","state","newState","isLoggedIn","toggleType","setState","isVolunteer","dispatch","Login"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,yBAAnB;AACA,OAAOC,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AAEA,SAAQC,aAAR,QAA4B,6BAA5B,C,CAEA;AACA;;AACA,MAAMC,cAAc,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACxC,MAAGD,KAAK,CAACE,UAAT,EAAoB;AAChBF,IAAAA,KAAK,CAACE,UAAN,GAAmB,KAAnB;AACH,GAFD,MAEO;AACHF,IAAAA,KAAK,CAACE,UAAN,GAAmB,IAAnB;AACH;AACJ,CAND;;AAQA,MAAMC,UAAU,GAAG,CAACH,KAAD,EAAQI,QAAR,KAAqB;AACpC,MAAIJ,KAAK,CAACK,WAAV,EAAuB;AACnBC,IAAAA,QAAQ,CAAC;AAAED,MAAAA,WAAW,EAAE;AAAf,KAAD,CAAR;AACH,GAFD,MAEO;AACHC,IAAAA,QAAQ,CAAC;AAAED,MAAAA,WAAW,EAAE;AAAf,KAAD,CAAR;AACH;AACJ,CAND;;AAQA,MAAME,KAAK,GAAG,MAAM;AAChB;AACA,QAAMP,KAAK,GAAGJ,UAAU,CAACE,aAAD,CAAxB;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAeJ,KAArB,CAHgB,CAIhB;AACA;AACA;;AACA,SACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,EAEI;AAAQ,IAAA,QAAQ,EAAE,MAAMD,cAAc,CAACC,KAAD,EAAQC,QAAR,CAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAQ,IAAA,QAAQ,EAAE,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DADJ,EAEI;AAAQ,IAAA,QAAQ,EAAE,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDAFJ,CAFJ,EAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAQD,KAAK,CAACE,UAAd,CAPJ,CADJ;AAeH,CAtBD;;AAwBA,eAAeK,KAAf","sourcesContent":["import Layout from '../components/TheLayout';\nimport React, { useContext, useState } from 'react';\n\nimport {GlobalContext} from '../components/GlobalContext';\n\n// need this to change the isLoggedIn state of the header\n// also will change the state if isVolunteer depending on how they log in\nconst toggleLoggedIn = (state, newState) => {\n    if(state.isLoggedIn){\n        state.isLoggedIn = false;\n    } else {\n        state.isLoggedIn = true;\n    }\n}\n\nconst toggleType = (state, setState) => {\n    if (state.isVolunteer) {\n        dispatch({ isVolunteer: false });\n    } else {\n        dispatch({ isVolunteer: true });\n    }\n}\n\nconst Login = () => {\n    // const [state, setState] = useContext(GlobalContext);\n    const state = useContext(GlobalContext);\n    const { setState } = state;\n    // const {isLoggedIn, isVolunteer} = state;\n    // const [isLoggedIn, setIsLoggedIn] = useState('');\n    // const [state, setState] = useContext(GlobalContext);\n    return (\n        <Layout>\n            <p>Login</p>\n            <select onChange={() => toggleLoggedIn(state, newState)}>\n                <option newState={false}>Just place holding for state, select if NOT logged in</option>\n                <option newState={true}>Just place holding for state, select if logged in</option>\n            </select> \n\n            <p>Here{state.isLoggedIn}</p>\n            {/* <select onChange={(e) => handleType(e.target.value)}>\n                <option isVolunteer={false}>Organization</option>\n                <option isVolunteer={true}>Volunteer</option>\n            </select>  */}\n        </Layout>\n    )\n}\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}