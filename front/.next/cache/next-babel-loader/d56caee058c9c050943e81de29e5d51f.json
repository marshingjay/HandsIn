{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useReducer } from 'react';\nvar defaultState = {\n  isLoggedIn: false,\n  isVolunteer: false\n}; // const GlobalContext = React.createContext([{}, () => {}]);\n\nvar GlobalContext = React.createContext(_objectSpread({}, defaultState));\n\nvar GlobalProvider = function GlobalProvider(_ref) {\n  var children = _ref.children;\n\n  var _useReducer = useReducer(function (state, action) {\n    switch (action.type) {\n      case 'change to false':\n        setState({\n          state: false\n        });\n\n      case 'change to true':\n        setState({\n          state: false\n        });\n    }\n  }),\n      state = _useReducer[0],\n      dispatch = _useReducer[1]; // const [state, setState] = useState({...defaultState});\n  // return (\n  //     <GlobalContext.Provider value={[state, setState]}>\n  //     {/* // <GlobalContext.Provider value=\"green\"> */}\n  //         {props.children}\n  //     </GlobalContext.Provider>\n  // );\n\n};\n\nexport { GlobalContext, GlobalProvider };","map":{"version":3,"sources":["/Users/claremeyer/Documents/spring_senior/senior_design/handsIn/front/components/GlobalContext.js"],"names":["React","useState","useReducer","defaultState","isLoggedIn","isVolunteer","GlobalContext","createContext","GlobalProvider","children","state","action","type","setState","dispatch"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,UAAzB,QAA0C,OAA1C;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAE,KADK;AAEjBC,EAAAA,WAAW,EAAE;AAFI,CAArB,C,CAKA;;AACA,IAAMC,aAAa,GAAGN,KAAK,CAACO,aAAN,mBAAwBJ,YAAxB,EAAtB;;AAGA,IAAMK,cAAc,GAAG,SAAjBA,cAAiB,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,oBACXP,UAAU,CAAC,UAACQ,KAAD,EAAQC,MAAR,EAAmB;AACpD,YAAOA,MAAM,CAACC,IAAd;AACI,WAAK,iBAAL;AACIC,QAAAA,QAAQ,CAAC;AAACH,UAAAA,KAAK,EAAE;AAAR,SAAD,CAAR;;AACJ,WAAK,gBAAL;AACIG,QAAAA,QAAQ,CAAC;AAAEH,UAAAA,KAAK,EAAE;AAAT,SAAD,CAAR;AAJR;AAMH,GAPmC,CADC;AAAA,MAC9BA,KAD8B;AAAA,MACvBI,QADuB,mBASrC;AACA;AACA;AAEA;AACA;AACA;AACA;;AACH,CAjBD;;AAmBA,SAAQR,aAAR,EAAuBE,cAAvB","sourcesContent":["import React, {useState, useReducer} from 'react';\n\nconst defaultState = {\n    isLoggedIn: false,\n    isVolunteer: false\n};\n\n// const GlobalContext = React.createContext([{}, () => {}]);\nconst GlobalContext = React.createContext({...defaultState});\n\n\nconst GlobalProvider = ({ children }) => {\n    const [state, dispatch] = useReducer((state, action) => {\n        switch(action.type){\n            case 'change to false': \n                setState({state: false});\n            case 'change to true':\n                setState({ state: false });\n        }\n    })\n    // const [state, setState] = useState({...defaultState});\n    // return (\n    //     <GlobalContext.Provider value={[state, setState]}>\n            \n    //     {/* // <GlobalContext.Provider value=\"green\"> */}\n    //         {props.children}\n    //     </GlobalContext.Provider>\n    // );\n}\n\nexport {GlobalContext, GlobalProvider};"]},"metadata":{},"sourceType":"module"}