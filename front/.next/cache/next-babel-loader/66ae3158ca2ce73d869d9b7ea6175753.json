{"ast":null,"code":"var _jsxFileName = \"/Users/claremeyer/Documents/spring_senior/senior_design/handsIn/front/pages/login.js\";\nvar __jsx = React.createElement;\nimport Layout from '../components/TheLayout';\nimport React, { useContext, useState } from 'react';\nimport { GlobalContext } from '../components/GlobalContext'; // need this to change the isLoggedIn state of the header\n// also will change the state if isVolunteer depending on how they log in\n\nvar setIsLoggedIn = function setIsLoggedIn(dispatch, state) {\n  dispatch({\n    isLoggedIn: state\n  });\n};\n\nvar setType = function setType(dispatch, state) {\n  dispatch({\n    isVolunteer: state\n  });\n};\n\nvar Login = function Login() {\n  // const [state, setState] = useContext(GlobalContext);\n  var data = useContext(GlobalContext);\n  var aState = data.aState; // const {isLoggedIn, isVolunteer} = state;\n  // const [isLoggedIn, setIsLoggedIn] = useState('');\n  // const [state, setState] = useContext(GlobalContext);\n\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \"Login\"), __jsx(\"select\", {\n    onChange: function onChange() {\n      return setIsLoggedIn(aState, isLoggedIn);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, __jsx(\"option\", {\n    isLoggedIn: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"Just place holding for state, select if NOT logged in\"), __jsx(\"option\", {\n    isLoggedIn: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Just place holding for state, select if logged in\")), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"Here\", data.isLoggedIn));\n};\n\nexport default Login;","map":{"version":3,"sources":["/Users/claremeyer/Documents/spring_senior/senior_design/handsIn/front/pages/login.js"],"names":["Layout","React","useContext","useState","GlobalContext","setIsLoggedIn","dispatch","state","isLoggedIn","setType","isVolunteer","Login","data","aState"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,yBAAnB;AACA,OAAOC,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AAEA,SAAQC,aAAR,QAA4B,6BAA5B,C,CAEA;AACA;;AACA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,QAAD,EAAWC,KAAX,EAAqB;AACvCD,EAAAA,QAAQ,CAAC;AAACE,IAAAA,UAAU,EAAED;AAAb,GAAD,CAAR;AACH,CAFD;;AAIA,IAAME,OAAO,GAAG,SAAVA,OAAU,CAACH,QAAD,EAAWC,KAAX,EAAqB;AACjCD,EAAAA,QAAQ,CAAC;AAAEI,IAAAA,WAAW,EAAEH;AAAf,GAAD,CAAR;AACH,CAFD;;AAIA,IAAMI,KAAK,GAAG,SAARA,KAAQ,GAAM;AAChB;AACA,MAAMC,IAAI,GAAGV,UAAU,CAACE,aAAD,CAAvB;AAFgB,MAGRS,MAHQ,GAGGD,IAHH,CAGRC,MAHQ,EAIhB;AACA;AACA;;AACA,SACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,EAEI;AAAQ,IAAA,QAAQ,EAAE;AAAA,aAAMR,aAAa,CAACQ,MAAD,EAASL,UAAT,CAAnB;AAAA,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAQ,IAAA,UAAU,EAAE,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DADJ,EAEI;AAAQ,IAAA,UAAU,EAAE,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDAFJ,CAFJ,EAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAQI,IAAI,CAACJ,UAAb,CAPJ,CADJ;AAeH,CAtBD;;AAwBA,eAAeG,KAAf","sourcesContent":["import Layout from '../components/TheLayout';\nimport React, { useContext, useState } from 'react';\n\nimport {GlobalContext} from '../components/GlobalContext';\n\n// need this to change the isLoggedIn state of the header\n// also will change the state if isVolunteer depending on how they log in\nconst setIsLoggedIn = (dispatch, state) => {\n    dispatch({isLoggedIn: state});\n}\n\nconst setType = (dispatch, state) => {\n    dispatch({ isVolunteer: state });\n}\n\nconst Login = () => {\n    // const [state, setState] = useContext(GlobalContext);\n    const data = useContext(GlobalContext);\n    const { aState } = data;\n    // const {isLoggedIn, isVolunteer} = state;\n    // const [isLoggedIn, setIsLoggedIn] = useState('');\n    // const [state, setState] = useContext(GlobalContext);\n    return (\n        <Layout>\n            <p>Login</p>\n            <select onChange={() => setIsLoggedIn(aState, isLoggedIn)}>\n                <option isLoggedIn={false}>Just place holding for state, select if NOT logged in</option>\n                <option isLoggedIn={true}>Just place holding for state, select if logged in</option>\n            </select> \n\n            <p>Here{data.isLoggedIn}</p>\n            {/* <select onChange={(e) => handleType(e.target.value)}>\n                <option isVolunteer={false}>Organization</option>\n                <option isVolunteer={true}>Volunteer</option>\n            </select>  */}\n        </Layout>\n    )\n}\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}