{"ast":null,"code":"var _jsxFileName = \"/Users/claremeyer/Documents/spring_senior/senior_design/handsIn/front/pages/login.js\";\nvar __jsx = React.createElement;\nimport Layout from '../components/TheLayout';\nimport React, { useContext, useState, useCallback } from 'react';\nimport { GlobalContext } from '../components/GlobalContext'; // need this to change the isLoggedIn state of the header\n// also will change the state if isVolunteer depending on how they log in\n\nconst toggleLoggedIn = (state, newState, forceUpdate) => {\n  // state.isLoggedIn = newState;\n  forceUpdate();\n};\n\nconst toggleType = (state, newState, forceUpdate) => {\n  state.isVolunteer = newState;\n  forceUpdate();\n};\n\nconst Login = () => {\n  const state = useContext(GlobalContext);\n  const {\n    dispatch\n  } = state;\n  dispatch({\n    type: 'change'\n  }); // const {state, setState} = useContext(GlobalContext);\n\n  const forceUpdate = React.useState()[1].bind(null, {});\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Login\"), __jsx(\"select\", {\n    onChange: e => toggleLoggedIn(state, e.target.value, forceUpdate),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, __jsx(\"option\", {\n    value: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Just place holding for state, select if NOT logged in\"), __jsx(\"option\", {\n    value: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Just place holding for state, select if logged in\")), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Here\", state.isLoggedIn), __jsx(\"select\", {\n    onChange: e => toggleType(state, e.target.value, forceUpdate),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, __jsx(\"option\", {\n    value: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Organization\"), __jsx(\"option\", {\n    value: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Volunteer\")));\n};\n\nexport default Login;","map":{"version":3,"sources":["/Users/claremeyer/Documents/spring_senior/senior_design/handsIn/front/pages/login.js"],"names":["Layout","React","useContext","useState","useCallback","GlobalContext","toggleLoggedIn","state","newState","forceUpdate","toggleType","isVolunteer","Login","dispatch","type","bind","e","target","value","isLoggedIn"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,yBAAnB;AACA,OAAOC,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,WAAtC,QAAyD,OAAzD;AAEA,SAAQC,aAAR,QAA4B,6BAA5B,C,CAEA;AACA;;AACA,MAAMC,cAAc,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,WAAlB,KAAkC;AACrD;AACAA,EAAAA,WAAW;AACd,CAHD;;AAKA,MAAMC,UAAU,GAAG,CAACH,KAAD,EAAQC,QAAR,EAAkBC,WAAlB,KAAkC;AACjDF,EAAAA,KAAK,CAACI,WAAN,GAAoBH,QAApB;AACAC,EAAAA,WAAW;AACd,CAHD;;AAMA,MAAMG,KAAK,GAAG,MAAM;AAChB,QAAML,KAAK,GAAGL,UAAU,CAACG,aAAD,CAAxB;AACA,QAAM;AAAEQ,IAAAA;AAAF,MAAeN,KAArB;AACAM,EAAAA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAAE;AAAP,GAAD,CAAR,CAHgB,CAIhB;;AACA,QAAML,WAAW,GAAGR,KAAK,CAACE,QAAN,GAAiB,CAAjB,EAAoBY,IAApB,CAAyB,IAAzB,EAA+B,EAA/B,CAApB;AAEA,SACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,EAGI;AAAQ,IAAA,QAAQ,EAAGC,CAAD,IAAOV,cAAc,CAACC,KAAD,EAAQS,CAAC,CAACC,MAAF,CAASC,KAAjB,EAAwBT,WAAxB,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI;AAAQ,IAAA,KAAK,EAAE,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DAFJ,EAGI;AAAQ,IAAA,KAAK,EAAE,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDAHJ,CAHJ,EASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAQF,KAAK,CAACY,UAAd,CATJ,EAUI;AAAQ,IAAA,QAAQ,EAAGH,CAAD,IAAON,UAAU,CAACH,KAAD,EAAQS,CAAC,CAACC,MAAF,CAASC,KAAjB,EAAwBT,WAAxB,CAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAQ,IAAA,KAAK,EAAE,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAEI;AAAQ,IAAA,KAAK,EAAE,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFJ,CAVJ,CADJ;AAiBH,CAxBD;;AA0BA,eAAeG,KAAf","sourcesContent":["import Layout from '../components/TheLayout';\nimport React, { useContext, useState, useCallback } from 'react';\n\nimport {GlobalContext} from '../components/GlobalContext';\n\n// need this to change the isLoggedIn state of the header\n// also will change the state if isVolunteer depending on how they log in\nconst toggleLoggedIn = (state, newState, forceUpdate) => {\n    // state.isLoggedIn = newState;\n    forceUpdate();\n}\n\nconst toggleType = (state, newState, forceUpdate) => {\n    state.isVolunteer = newState;\n    forceUpdate();\n}\n\n\nconst Login = () => {\n    const state = useContext(GlobalContext);\n    const { dispatch } = state;\n    dispatch({type: 'change'})\n    // const {state, setState} = useContext(GlobalContext);\n    const forceUpdate = React.useState()[1].bind(null, {})\n\n    return (\n        <Layout>\n            <p>Login</p>\n\n            <select onChange={(e) => toggleLoggedIn(state, e.target.value, forceUpdate)}>\n            {/* <select onChange={(e) => dispatch({type: 'change'})}> */}\n                <option value={false} >Just place holding for state, select if NOT logged in</option>\n                <option value={true}>Just place holding for state, select if logged in</option>\n            </select>\n\n            <p>Here{state.isLoggedIn}</p>\n            <select onChange={(e) => toggleType(state, e.target.value, forceUpdate)}>\n                <option value={false}>Organization</option>\n                <option value={true}>Volunteer</option>\n            </select> \n        </Layout>\n    )  \n}\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}