{"ast":null,"code":"var _jsxFileName = \"/Users/claremeyer/Documents/spring_senior/senior_design/handsIn/front/pages/login.js\";\nvar __jsx = React.createElement;\nimport Layout from '../components/TheLayout';\nimport React, { useContext, useState, useCallback } from 'react';\nimport Header from '../components/Header';\nimport { GlobalContext } from '../components/GlobalContext'; // need this to change the isLoggedIn state of the header\n// also will change the state if isVolunteer depending on how they log in\n\nvar updatePage = function updatePage(theState) {\n  console.log(state.isLoggedIn);\n\n  if (theState == false) {\n    state.page = state.type;\n  }\n};\n\nvar toggleLoggedIn = function toggleLoggedIn(state, newState, forceUpdate) {\n  state.isLoggedIn = newState; // if(newState){\n  //     state.page = state.type;\n  // }\n  // if(newState){\n  //     state.page = state.type;\n  // }\n  // if(!newState) {\n  //     state.page = \"\\login\";\n  // }\n\n  forceUpdate();\n  console.log(state.isLoggedIn);\n  updatePage(state.isLoggedIn);\n};\n\nvar toggleType = function toggleType(state, newState, forceUpdate) {\n  state.type = newState;\n  toggleLoggedIn(state, state.isLoggedIn, forceUpdate);\n  updatePage(state); // forceUpdate();\n};\n\nvar Login = function Login() {\n  var state = useContext(GlobalContext); // const {info, setInfo} = useContext(GlobalContext);\n\n  var forceUpdate = React.useState()[1].bind(null, {});\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Login\"), __jsx(\"select\", {\n    onChange: function onChange(e) {\n      return toggleLoggedIn(state, e.target.value, forceUpdate);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, __jsx(\"option\", {\n    value: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Just place holding for state, select if NOT logged in\"), __jsx(\"option\", {\n    value: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Just place holding for state, select if logged in\")), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Here\", state.isLoggedIn, \" \", state.page), __jsx(\"select\", {\n    onChange: function onChange(e) {\n      return toggleType(state, e.target.value, forceUpdate);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, __jsx(\"option\", {\n    value: \"/orgDash\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Organization\"), __jsx(\"option\", {\n    value: \"/userDash\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Volunteer\")));\n};\n\nexport default Login;","map":{"version":3,"sources":["/Users/claremeyer/Documents/spring_senior/senior_design/handsIn/front/pages/login.js"],"names":["Layout","React","useContext","useState","useCallback","Header","GlobalContext","updatePage","theState","console","log","state","isLoggedIn","page","type","toggleLoggedIn","newState","forceUpdate","toggleType","Login","bind","e","target","value"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,yBAAnB;AACA,OAAOC,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,WAAtC,QAAyD,OAAzD;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,SAAQC,aAAR,QAA4B,6BAA5B,C,CAEA;AACA;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,QAAD,EAAc;AAC7BC,EAAAA,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACC,UAAlB;;AACA,MAAIJ,QAAQ,IAAI,KAAhB,EAAuB;AACnBG,IAAAA,KAAK,CAACE,IAAN,GAAaF,KAAK,CAACG,IAAnB;AACH;AACJ,CALD;;AAOA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACJ,KAAD,EAAQK,QAAR,EAAkBC,WAAlB,EAAkC;AACrDN,EAAAA,KAAK,CAACC,UAAN,GAAmBI,QAAnB,CADqD,CAErD;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEAC,EAAAA,WAAW;AACXR,EAAAA,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACC,UAAlB;AACAL,EAAAA,UAAU,CAACI,KAAK,CAACC,UAAP,CAAV;AACH,CAhBD;;AAkBA,IAAMM,UAAU,GAAG,SAAbA,UAAa,CAACP,KAAD,EAAQK,QAAR,EAAkBC,WAAlB,EAAkC;AACjDN,EAAAA,KAAK,CAACG,IAAN,GAAaE,QAAb;AACAD,EAAAA,cAAc,CAACJ,KAAD,EAAQA,KAAK,CAACC,UAAd,EAA0BK,WAA1B,CAAd;AACAV,EAAAA,UAAU,CAACI,KAAD,CAAV,CAHiD,CAIjD;AACH,CALD;;AAQA,IAAMQ,KAAK,GAAG,SAARA,KAAQ,GAAM;AAChB,MAAMR,KAAK,GAAGT,UAAU,CAACI,aAAD,CAAxB,CADgB,CAEhB;;AAEA,MAAMW,WAAW,GAAGhB,KAAK,CAACE,QAAN,GAAiB,CAAjB,EAAoBiB,IAApB,CAAyB,IAAzB,EAA+B,EAA/B,CAApB;AAEA,SACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,EAGI;AAAQ,IAAA,QAAQ,EAAE,kBAACC,CAAD;AAAA,aAAON,cAAc,CAACJ,KAAD,EAAQU,CAAC,CAACC,MAAF,CAASC,KAAjB,EAAwBN,WAAxB,CAArB;AAAA,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI;AAAQ,IAAA,KAAK,EAAE,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DAFJ,EAGI;AAAQ,IAAA,KAAK,EAAE,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yDAHJ,CAHJ,EASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAQN,KAAK,CAACC,UAAd,OAA2BD,KAAK,CAACE,IAAjC,CATJ,EAWI;AAAQ,IAAA,QAAQ,EAAE,kBAACQ,CAAD;AAAA,aAAOH,UAAU,CAACP,KAAD,EAAQU,CAAC,CAACC,MAAF,CAASC,KAAjB,EAAwBN,WAAxB,CAAjB;AAAA,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAQ,IAAA,KAAK,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAEI;AAAQ,IAAA,KAAK,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFJ,CAXJ,CADJ;AAkBH,CAxBD;;AA0BA,eAAeE,KAAf","sourcesContent":["import Layout from '../components/TheLayout';\nimport React, { useContext, useState, useCallback } from 'react';\nimport Header from '../components/Header';\n\nimport {GlobalContext} from '../components/GlobalContext';\n\n// need this to change the isLoggedIn state of the header\n// also will change the state if isVolunteer depending on how they log in\nconst updatePage = (theState) => {\n    console.log(state.isLoggedIn);\n    if (theState == false) {\n        state.page = state.type;\n    }\n}\n\nconst toggleLoggedIn = (state, newState, forceUpdate) => {\n    state.isLoggedIn = newState;\n    // if(newState){\n    //     state.page = state.type;\n    // }\n    // if(newState){\n    //     state.page = state.type;\n    // }\n    \n    // if(!newState) {\n    //     state.page = \"\\login\";\n    // }\n    \n    forceUpdate();\n    console.log(state.isLoggedIn);\n    updatePage(state.isLoggedIn);\n}\n\nconst toggleType = (state, newState, forceUpdate) => {\n    state.type = newState;\n    toggleLoggedIn(state, state.isLoggedIn, forceUpdate);\n    updatePage(state);\n    // forceUpdate();\n}\n\n\nconst Login = () => {\n    const state = useContext(GlobalContext);\n    // const {info, setInfo} = useContext(GlobalContext);\n\n    const forceUpdate = React.useState()[1].bind(null, {})\n\n    return (\n        <Layout>\n            <p>Login</p>\n\n            <select onChange={(e) => toggleLoggedIn(state, e.target.value, forceUpdate)}>\n            {/* <select onChange={(e) => dispatch({type: 'change'})}> */}\n                <option value={false}>Just place holding for state, select if NOT logged in</option>\n                <option value={true}>Just place holding for state, select if logged in</option>\n            </select>\n\n            <p>Here{state.isLoggedIn} {state.page}</p>\n            \n            <select onChange={(e) => toggleType(state, e.target.value, forceUpdate)}>\n                <option value=\"/orgDash\" >Organization</option>\n                <option value=\"/userDash\">Volunteer</option>\n            </select> \n        </Layout>\n    )  \n}\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}