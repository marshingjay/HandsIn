{"version":3,"file":"static/webpack/static/development/pages/login.js.21fa2122cbb22cee4159.hot-update.js","sources":["webpack:///./components/GlobalContext.js","webpack:///./pages/login.js"],"sourcesContent":["import React, { useReducer } from 'react';\n\nlet reducer = (info, newInfo) => {\n    return {...info, ...newInfo};\n}\n\nconst defaultState = {\n    isLoggedIn: false,\n    isVolunteer: false  \n};\n\nconst GlobalContext = React.createContext();\n\nconst GlobalProvider = (props) => {\n    const [info, setInfo] = useReducer(reducer, defaultState);\n    return (\n        <GlobalContext.Provider value={{info, setInfo}}>\n            {props.children}\n        </GlobalContext.Provider>\n    );\n};\n\nexport {GlobalContext, GlobalProvider};\n\n\n// const GlobalReducer = (state, action) => {\n//     switch (action.type) {\n//         case SET_STATES: \n//             return {\n//                 ...state,\n//                 isLoggedIn: { ...action.AisLoggedIn },\n//                 isVolunteer: {...action.AisVolunteer }\n//             }\n//         default:\n//             return state;\n//     }\n// };\n\n\n// const UseGlobalState = () => {\n//     const [state, setState] = useContext(GlobalContext);\n\n//     const setTheState = ({ aisLoggedIn, aisVolunteer }) => {\n//         setState({\n//             type: SET_STATE,\n//             isLoggedIn: aisLoggedIn,\n//             isVolunteer: aisVolunteer\n//         });\n//     };\n\n//     return {\n//         setTheState,\n//         isLoggedIn: { ...state.isLoggedIn },\n//         isVolunteer: {...state.isVolunteer },\n//     };\n// };\n\n// export default UseGlobalState;","import Layout from '../components/TheLayout';\nimport React, { useContext, useState, useCallback } from 'react';\n\nimport {GlobalContext} from '../components/GlobalContext';\n\n// need this to change the isLoggedIn state of the header\n// also will change the state if isVolunteer depending on how they log in\nconst toggleLoggedIn = (state, newState, forceUpdate) => {\n    state.isLoggedIn = newState;\n    forceUpdate();\n}\n\nconst toggleType = (state, newState, forceUpdate) => {\n    state.isVolunteer = newState;\n    forceUpdate();\n}\n\n\nconst Login = () => {\n    // const state = useContext(GlobalContext);\n    const {info, setInfo} = useContext(GlobalContext);\n\n    const forceUpdate = React.useState()[1].bind(null, {})\n\n    return (\n        <Layout>\n            <p>Login</p>\n\n            <select onChange={(e) => toggleLoggedIn(state, e.target.value, forceUpdate)}>\n            {/* <select onChange={(e) => dispatch({type: 'change'})}> */}\n                <option value={false} >Just place holding for state, select if NOT logged in</option>\n                <option value={true}>Just place holding for state, select if logged in</option>\n            </select>\n\n            <p>Here{state.isLoggedIn}</p>\n            <select onChange={(e) => toggleType(state, e.target.value, forceUpdate)}>\n                <option value={false}>Organization</option>\n                <option value={true}>Volunteer</option>\n            </select> \n        </Layout>\n    )  \n}\n\nexport default Login;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;ACzDA;AACA;AAEA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAAA;AAAA;AACA;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;A","sourceRoot":""}